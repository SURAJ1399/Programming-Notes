// { Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;

#define MAX 5
vector<string> findPath(int m[MAX][MAX], int n);

// Position this line where user code will be pasted.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;

        int m[MAX][MAX];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }

        vector<string> result = findPath(m, n);
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++) cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}// } Driver Code Ends


// User function template for C++

// m is the given matrix and n is the order of matrix
// MAX is the upper limit of N ie 5
vector<string>ans;
string tempans;
bool issafe(int i,int j,int n)
{
    if(i>=0 && j>=0 && i<n && j<n)
    return true;
    else
    return false;
}
void maze(int row,int col,int n,int m[MAX][MAX])
{
    if(row==n-1 && col==n-1)
    {ans.push_back(tempans);
    
        return;
    }
    int rown[]={-1,1,0,0};
    int coln[]={0,0,-1,1};
    char  dir[]={'U','D','L','R'};
    for(int k=0;k<4;k++)
    {
       if(issafe(rown[k]+row,coln[k]+col,n)&& m[rown[k]+row][coln[k]+col]==1)
        {
            tempans.push_back(dir[k]);
            m[row][col]=0;
            maze(rown[k]+row,coln[k]+col,n,m);
            tempans.pop_back();
            m[row][col]=1;
        }
    }
}
vector<string> findPath(int m[MAX][MAX], int n) {
    // Your code goes here
    ans.clear();
    tempans="";
    if(m[0][0]==0 || m[n-1][n-1]==0)
    { ans.push_back("-1");
        return ans;

        
    }          maze(0,0,n,m);
          sort(ans.begin(),ans.end());
          return ans;
        
    
    }
    

