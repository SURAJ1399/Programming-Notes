class Solution {
public:
    vector<vector<char>>aux;
    bool issafe(int row,int col,vector<vector<char>>&board,int val)
    {
            for(int i=0;i<9;i++)
        if(board[i][col] == val+'0') return false;

            
            for(int i=0;i<9;i++)
        if(board[row][i] == val+'0') return false;
            
        
            int smi=row/3*3;
            int smj=col/3*3;
        
        for(int i=0;i<3;i++)
            for(int j=0;j<3;j++)
            {
                if(board[smi+i][smj+j]==val+'0')
                    return false;
            }
        
        return true;
    
    }
    void sudoku(int i,int j,vector<vector<char>>& board)
    {
        if(i==board.size())
        {

            aux=board;
            return; 
        }
        int ni=0;
        int nj=0;
        if(j==board[0].size()-1)
        {
            ni=i+1;
            nj=0;
        }
        else
        {
            ni=i;
            nj=j+1;
        }
        if(board[i][j]!='.')
            sudoku(ni,nj,board);
        else
        {
            for(int po=1;po<=9;po++)
            {
               if( issafe(i,j,board,po))
                {
                    board[i][j]=po+'0';
                    sudoku(ni,nj,board);
                    board[i][j]='.';
                    
                }
            }
        }
            
    }
        
    void solveSudoku(vector<vector<char>>& board) {
        sudoku(0,0,board);
        board=aux;
        
    }
};