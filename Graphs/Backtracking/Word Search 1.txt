class Solution {
public:
    int index=0;
        int found=0;
    int breakp=0;
    bool safe(int x,int y,int r,int c )
{
    
      if( x>= 0 && x < r && y >= 0 && y < c )
      return true;
      
      else
       return false;
      
    
}
    
    bool dfs(int i,int j,vector<vector<char>>& board, string word,int r,int c,int index)
        
        
    {     char temp=board[i][j];
         board[i][j]='*';   
        if(index==word.length()-1)
                   {
                      
                       return true;
                   }
        
         static int row[] = { 1,-1,0,0 }; 
        static int col[] = { 0, 0, 1, -1 }; 

 
    for(int k=0;k<4;k++)
    { 
        if(safe(i+row[k],j+col[k],r,c)  && board[i+row[k]]                                                                         [j+col[k]]!='*' && board[i+row[k]][j+col[k]]==word[index+1] )
       {
          
            
           bool x=dfs(i+row[k],j+col[k],board,word,r,c,index+1);
              if(x)
            return true;

        }
   
    } board[i][j]=temp;
        return false;
    
     
       
    }
    
    bool exist(vector<vector<char>>& board, string word) {
        int r=board.size();
        int c=board[0].size();
        if(board[0][0]==word[0] && word.length()==1)
            return true;
    
    
        
        bool x;
        for(int i=0;i<r;i++)
        {
               for(int j=0;j<c;j++)
               {
                   
           
               
                   
                 
           if(board[i][j]==word[0])
                   if(dfs(i,j,board,word,r,c,0))
              return true;
                      
                   
               }
        }
        
        
            return false;
      
    }
};