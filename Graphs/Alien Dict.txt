// { Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends


// User function Template for C++

class Solution{
    public:
    stack<int> Stack;
    
  void  topologicalSortUtil(int v, bool visited[],  vector<int>adj[]) 
{ 
    // Mark the current node as visited. 
    visited[v] = true; 
  
    
    for (auto i :adj[v]) 
        if (!visited[i]) 
            topologicalSortUtil(i, visited,adj); 
  
    // Push current vertex to stack 
    // which stores result 
    Stack.push(v); 
} 
    
    string findOrder(string dict[], int N, int K) {
        //code herev
        vector<int>g[K];
        for(int i=0;i<N-1;i++)
        {
            int mi=min(dict[i].length(),dict[i+1].length());
            for(int j=0;j<mi;j++)
            if(dict[i][j]!=dict[i+1][j])
            {
                 g[dict[i][j]-'a'].push_back(dict[i+1][j]-'a');
                break;
            }
        }
       
  
    // Mark all the vertices as not visited 
    bool visited[K]; 
    for (int i = 0; i < K; i++) 
        visited[i] = false; 
  
    // Call the recursive helper function 
    // to store Topological 
    // Sort starting from all 
    // vertices one by one 
    for (int i = 0; i < K; i++) 
        if (visited[i] == false) 
            topologicalSortUtil(i, visited,g); 
  
    // Print contents of stack 
    string s;
    while (Stack.empty() == false) { 
        s+=(char)(Stack.top()+'a');
        Stack.pop(); 
    }
    return s;
    }
};

// { Driver Code Starts.
string order;
bool f(string a, string b) {
    int p1 = 0;
    int p2 = 0;
    for (int i = 0; i < min(a.size(), b.size()) and p1 == p2; i++) {
        p1 = order.find(a[i]);
        p2 = order.find(b[i]);
        //	cout<<p1<<" "<<p2<<endl;
    }

    if (p1 == p2 and a.size() != b.size()) return a.size() < b.size();

    return p1 < p2;
}

// Driver program to test above functions
int main() {
    int t;
    cin >> t;
    while (t--) {
        int N, K;
        cin >> N >> K;
        string dict[N];
        for (int i = 0; i < N; i++) cin >> dict[i];
        
        Solution obj;
        string ans = obj.findOrder(dict, N, K);
        order = "";
        for (int i = 0; i < ans.size(); i++) order += ans[i];

        string temp[N];
        std::copy(dict, dict + N, temp);
        sort(temp, temp + N, f);

        bool f = true;
        for (int i = 0; i < N; i++)
            if (dict[i] != temp[i]) f = false;

        if(f)cout << 1;
        else cout << 0;
        cout << endl;
    }
    return 0;
}
  // } Driver Code Ends