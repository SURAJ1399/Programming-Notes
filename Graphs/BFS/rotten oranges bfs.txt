// { Driver Code Starts
//Initial template for C++

#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends


//User function template for C++

// matrix : given matrix
// R and C : number of rows and columns respectively
bool issafe(vector<vector<int> > &arr,int x,int y, int r, int c)
{
   if( x>= 0 && x < r && y >= 0 && y < c  && arr[x][y]==1)
      return true;
      
      else
       return false;
       
}


int rotOranges(vector<vector<int> > &matrix, int R, int C)
{
    int count=0,fresh=0;

    queue <pair<int,int>>q;
       
       for(int i=0;i<R;i++)
   {
        for(int j=0;j<C;j++)
       {
           if(matrix[i][j]==2)
           {
              q.push({i,j});
      
       }
   }
   
   int nrow[]={1,-1,0,0};
    
    int ncol[]={0,0,-1,1};
    
    while(!q.empty())
    {
       
       int size=q.size();
        for(int k=0;k<size;k++)
        { 
            int x=q.front().first;
            int y=q.front().second;
             q.pop();
        for(int i=0;i<4;i++)
        { 
           if( issafe(matrix,x+nrow[i],y+ncol[i],R,C))
          {
              matrix[x+nrow[i]][y+ncol[i]]=2;
              q.push({x+nrow[i],y+ncol[i]});
              
          }
        }
          
         
        }
        if(!q.empty())
        count++;
       
      
    }
    
       for(int i=0;i<R;i++)
   {
        for(int j=0;j<C;j++)
       {
           if(matrix[i][j]==1 )
           
              return -1;
       }
   }
   return count;
       
   
}

// { Driver Code Starts.

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int R,C;
        cin>>R>>C;
        vector<vector<int> > matrix(R);
        for(int i=0;i<R;++i)
        {
            matrix[i].resize(C);
            for(int j=0;j<C;++j)
                cin>>matrix[i][j];
        }
        cout<<rotOranges(matrix,R,C)<<endl;
    }
    return 0;
}  // } Driver Code Ends