//https://www.interviewbit.com/problems/black-shapes/

 int row[]={-1,0,1,0};
         int col[]={0,1,0,-1};
         
 
 
 
bool check(int x,int y,int r,int c)
{
    if(x>=0&& x<r && y>=0 && y<c)
    return true;
    else
    return false;
}
 
void dfs(int i,int j,vector<vector<char>>&vec,vector<vector<int>>&vis,int r,int c,int s)
{
    
    vis[i][j]=1;
    //  cout<<i<<" "<<j<<endl;
      for(int k=0;k<4;k++)
           {
               
              
               int nrow=i+row[k];
               int ncol=j+col[k];
                  //cout<<nrow<<ncol<<end
               if(check(nrow,ncol,r,c) && vis[nrow][ncol]==0 && vec[nrow][ncol]=='X')
               {
                   
               
                       dfs(nrow,ncol,vec,vis,r,c,s);
                    
                    
               }
             
           
           
                 }
       return;
      
             
}
 
 
int Solution::black(vector<string> &A) {
     int r=A.size();
    int c=A[0].size();
    vector<vector<char>>vec(r,vector<char>(c,'O'));
 
  
   
    for(int i=0;i<A.size();i++)
    {
        string s=A[i];
        for(int j=0;j<s.size();j++)
        {
          vec[i][j]=s[j];
          
        }
    }
   
   // cout<<r<<c<<endl;
         vector<vector<int>>vis(r,vector<int>(c,0));
         
        
              int count =0;
              int flag=1;
      for(int i=0;i<r;i++)
    {
    
        for(int j=0;j<c;j++)
        {
             if(vis[i][j]==0 && vec[i][j]=='X')
             { count++;
                 dfs(i,j,vec,vis,r,c,0);
            
            // cout<<count<<" ";
             }
         
        
           }
        }
    
       
           
          
          
           
         
         return count;
  
    
    
}