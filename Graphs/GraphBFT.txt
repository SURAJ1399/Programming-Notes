
void bfs(int s, vector<int> adj[], bool vis[], int N)
{
    // Your code here
    
    for(int i = 0; i < N; i++) 
        vis[i] = false; 
  
    // Create a queue for BFS 
    list<int> queue; 
  
    // Mark the current node as visited and enqueue it 
    vis[s] = true; 
    queue.push_back(s); 
  
    // 'i' will be used to get all adjacent 
    // vertices of a vertex 
    list<int>::iterator i; 
  
    while(!queue.empty()) 
    { 
        // Dequeue a vertex from queue and print it 
        s = queue.front(); 
        cout << s << " "; 
        queue.pop_front(); 
  
        // Get all adjacent vertices of the dequeued 
        // vertex s. If a adjacent has not been visited,  
        // then mark it visited and enqueue it 
        for (auto node:adj[s]) 
        { 
            if (!vis[node]) 
            { 
                vis[node] = true; 
                queue.push_back(node); 
            } 
        } 
    } 
}